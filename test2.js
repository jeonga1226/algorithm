function solution(n, times) {
    var answer = 0;

    // 0/7-> 0/10 -> 7/7 -> 10/10 -> 14/7 -> 21/7 => 28
    // 7 -> 10 -> 14 -> 20 -> 28
    // 0/3 -> 0/5 -> 0/7 -> 3/3 -> 6/3 -> 5/5 -> 9/3 -> 7/7 -> 10/5 -> 12/3 -> 15/3 -> 15/5 -> 14/7
    // 3 -> 5 -> 7 -> 6 -> 9 -> 10 -> 12 -> 14 -> 15 -> 15 -> 18 -> 20 -> 21

    // 10 * 6 = 60
    // 60/2 => 30/7 + 30/10 = 4 + 3 = 7 (x)
    // 30/2 => 15/7 + 15/10 = 2 + 1 = 3 (x)
    // (30+15)/2 => 28/7 + 28/10 = 4 + 2 = 6 (o)
    
    // 7 * 13 = 91
    // 91/2 => 45/3 + 45/5 + 45/7 = x
    // 45/2 => 23/3 + 23/5 + 23/7 = 7+4+3 = 14
    // 12/2 => 12/3 + 12/5 + 12/7 = 7
    // (23+12)/2 = 18/3 + 18/5 + 18/7 = 11
    // (23+18)/2 = 21/3 + 21/5 + 21/7 = 7+4+3 = 14 (21)
    // (23+17)/2 = 20/3 + 20/5 + 20/7 = 6+4+2 = 12 (20)
    // result = 21

    var high = n * Math.max(times) / 2;
    var high = n * Math.max(times) / 2;
    var low = 0;
    var mid = 0;
    
    while(right > ){
        let answer = initNum / 2;

        const count = times.reduce((acc, time)=>{
            return acc + Math.floor(left/ time)
        },0);
        
        if(count >= n){
            answer = 
        }else{
            
        }
    }






    
    return answer;
}

solution(6,[7, 10]);    // 28
solution(13,[3, 5, 7]); // 21    